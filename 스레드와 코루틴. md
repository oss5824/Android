# 스레드와 코루틴  
## 1.스레드와 루퍼  
+ 안드로이드의 스레드는 크게 1개만 존재하는 메인 스레드와 여러 개가 존재할 수 있는 백그라운드 스레드로 나눌 수 있음  
+ 메인스레드(UI 스레드) 
  - 메인스레드는 화면의 UI를 그리는 처리를 담당, 안드로이드 UI툴킷의 구성요소와 상호작용하고 UI이벤트를 사용자에게 응답하는 스레드  
  - 안드로이드 시스템은 새로운 앱을 실행하면 새로운 리눅스 프로세스를 실행함  
  - 기본적으로 메인 액티비티를 비롯한 모든 컴포넌트는 단일 프로세스 및 메인 스레드에서 실행 됨  
  - 시간이 오래걸리는 코드는 새로운 스레드를 생성해서 처리해야 함  
+ 백그라운드 스레드  
  - 안드로이드 시스템은 메모리 이외의 다른 곳에서 데이터를 가져오는 작업을 백그라운드 스레드에서 처리하는 것을 권장(ex)네트워크 작업, 파일 업로드와 다운로드 등등)  
 
Thread클래스를 상속받아 스레드를 생성할 수 있음  
```kotlin  
class WorkerThread: Threae(){  
  override fun run(){  
  }//스레드가 처리할 로직을 정의하는 run()메서드를 오버라이드  
}  
```  
  Runnable 인터페이스를 구현해 스레드를 생성할 수 있음  
```kotlin  
class WorkerRunnable: Runnable{  
  override fun run(){  
  }  
}  
```
  - 람다식으로 Runnable 익명객체 구현이 가능  
```kotlin  
Thread{  
}.start()  
```   
  - 코틀린에서 제공하는 thread()  
```kotlin   
thread(start=true){  
}  
```  
+ 위와 같은 방식으로 코드를 분산함으로써 더 효율적인 앱을 만들 수 있지만 백그라운드 스레드는 UI구성요소에 접근하면 안된다는 중요한 규칙이 있음(메인 스레드 이외의 스레드는 UI를 업데이트 할 수 없음)  
+ 핸들러와 루퍼  
   - 안드로이드는 메인 스레드와 백그라운드 스레드 및 스레드 간의 통신을 위해 핸들러와 루퍼를 제공  
   
  
